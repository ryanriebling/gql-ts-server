import { isValidPath, parseGraphQLSDL } from '@graphql-toolkit/common';
import { extname, isAbsolute, resolve } from 'path';
import { existsSync, readFileSync } from 'fs';

const GQL_EXTENSIONS = ['.gql', '.graphql', '.graphqls'];
class GraphQLFileLoader {
    loaderId() {
        return 'graphql-file';
    }
    async canLoad(pointer, options) {
        if (isValidPath(pointer)) {
            const extension = extname(pointer).toLowerCase();
            if (GQL_EXTENSIONS.includes(extension)) {
                const normalizedFilePath = isAbsolute(pointer) ? pointer : resolve(options.cwd || process.cwd(), pointer);
                if (existsSync(normalizedFilePath)) {
                    return true;
                }
            }
        }
        return false;
    }
    async load(pointer, options) {
        const normalizedFilePath = isAbsolute(pointer) ? pointer : resolve(options.cwd, pointer);
        const rawSDL = readFileSync(normalizedFilePath, 'utf-8').trim();
        return parseGraphQLSDL(pointer, rawSDL, options);
    }
}

export { GraphQLFileLoader };
