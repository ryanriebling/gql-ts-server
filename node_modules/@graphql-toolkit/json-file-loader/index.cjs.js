'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const path = require('path');
const common = require('@graphql-toolkit/common');
const fs = require('fs');

class JsonFileLoader {
    loaderId() {
        return 'json-file';
    }
    async canLoad(pointer, options) {
        if (common.isValidPath(pointer)) {
            const extension = path.extname(pointer).toLowerCase();
            if (extension === '.json') {
                const normalizedFilePath = path.isAbsolute(pointer) ? pointer : path.resolve(options.cwd || process.cwd(), pointer);
                if (fs.existsSync(normalizedFilePath)) {
                    return true;
                }
            }
        }
        return false;
    }
    async load(pointer, options) {
        const normalizedFilepath = path.isAbsolute(pointer) ? pointer : path.resolve(options.cwd || process.cwd(), pointer);
        try {
            const jsonContent = fs.readFileSync(normalizedFilepath, 'utf8');
            return common.parseGraphQLJSON(pointer, jsonContent, options);
        }
        catch (e) {
            throw new Error(`Unable to read JSON file: ${normalizedFilepath}`);
        }
    }
}

exports.JsonFileLoader = JsonFileLoader;
