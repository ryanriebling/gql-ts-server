import { extname, isAbsolute, resolve } from 'path';
import { isValidPath, parseGraphQLJSON } from '@graphql-toolkit/common';
import { existsSync, readFileSync } from 'fs';

class JsonFileLoader {
    loaderId() {
        return 'json-file';
    }
    async canLoad(pointer, options) {
        if (isValidPath(pointer)) {
            const extension = extname(pointer).toLowerCase();
            if (extension === '.json') {
                const normalizedFilePath = isAbsolute(pointer) ? pointer : resolve(options.cwd || process.cwd(), pointer);
                if (existsSync(normalizedFilePath)) {
                    return true;
                }
            }
        }
        return false;
    }
    async load(pointer, options) {
        const normalizedFilepath = isAbsolute(pointer) ? pointer : resolve(options.cwd || process.cwd(), pointer);
        try {
            const jsonContent = readFileSync(normalizedFilepath, 'utf8');
            return parseGraphQLJSON(pointer, jsonContent, options);
        }
        catch (e) {
            throw new Error(`Unable to read JSON file: ${normalizedFilepath}`);
        }
    }
}

export { JsonFileLoader };
